#global environment variable 
env: 
 sonar_scanner_version: 4.7.0.2747-linux
 PROJECT_ID: ${{ secrets.GKE_PROJECT }}
 GKE_CLUSTER: champion2    # Add your cluster name here.
 GKE_ZONE: us-west1-a   # Add your cluster zone here.
 

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  buildandpush:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
    
      # Docker Login
      - name: Docker login
        env:
         DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
         DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
         docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_TOKEN
            
      # Build container image 
      - name: build container image  
        run: | 
         docker build coit-frontend -t nixvarghese03/coit-simple-micro-ga:latest -f coit-frontend/Dockerfile-multistage
     
      # push container image 
      - name: push container image  
        run: | 
         docker push nixvarghese03/coit-simple-micro-ga:latest 
         
      # Setup gcloud CLI
      - uses: google-github-actions/setup-gcloud@94337306dda8180d967a56932ceb4ddcf01edae7
        with:
          service_account_key: ${{ secrets.GKE_SA_KEY }}
          project_id: ${{ secrets.GKE_PROJECT }}
          
      # Get the GKE credentials so we can deploy to the cluster
      - uses: google-github-actions/get-gke-credentials@fb08709ba27618c31c09e014e1d8364b02e5042e
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
          credentials: ${{ secrets.GKE_SA_KEY }}
          
      # Deploy the Docker image to the GKE cluster
      - name: Deploy
        run: |
          kubectl create namespace prod 
          cd frontend-kustomize-prod
          kubectl apply -k .

      # Delete stage namespace 
      - name: Delete prod namespace
        run: | 
         sleep 60
         kubectl delete namespace prod
     